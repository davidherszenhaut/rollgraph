{"version":3,"sources":["utils.tsx","PieChart/PieChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rollDice","faces","times","min","max","rolls","i","push","Math","floor","random","aggregateData","counts","length","aggregation","Object","entries","number","count","value","parseInt","PieChart","props","data","width","height","pie","d3","sort","d","arc","innerRadius","outerRadius","color","domain","map","toString","range","radius","arcLabel","arcs","svg","attr","append","selectAll","join","text","centroid","call","filter","endAngle","startAngle","node","chart","id","App","useState","setFaces","setTimes","setRolls","shouldKeepRolls","setShouldKeepRolls","className","type","onChange","e","target","onClick","item","buildTable","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1883d5e2.chunk.js","sourcesContent":["import { Data } from \"./Types\";\n\n/**\n *\n * @param min The lower bound for the random number.\n * @param max The upper bound for the random number.\n * @returns A random integer between `min` and `max`.\n */\nexport function generateRandomIntegerInclusive(\n  min: number,\n  max: number\n): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n *\n * @param faces The highest number that the die can roll.\n * @param times How many times the die will be rolled.\n * @returns An array of die rolls based on `faces` and `times`.\n */\nexport function rollDice(faces: number, times: number): number[] {\n  const rolls: number[] = [];\n  for (let i = 0; i < times; i++) {\n    rolls.push(generateRandomIntegerInclusive(1, faces));\n  }\n  return rolls;\n}\n\n/**\n *\n * @param rolls An array of die rolls.\n * @returns An array of `Data` objects where each `Data.value` is the face number and `Data.count` is the number of times that face value was rolled.\n */\nexport function aggregateData(rolls: number[]): Array<Data> {\n  const counts: { [key: number]: number } = {};\n  for (let i = 0; i < rolls.length; i++) {\n    if (counts[rolls[i]]) {\n      counts[rolls[i]] = counts[rolls[i]] + 1;\n    } else {\n      counts[rolls[i]] = 1;\n    }\n  }\n  const aggregation: Data[] = [];\n  for (const [number, count] of Object.entries(counts)) {\n    aggregation.push({ value: parseInt(number), count: count });\n  }\n  return aggregation;\n}\n","import React, { ReactElement } from \"react\";\nimport * as d3 from \"d3\";\nimport { PieArcDatum } from \"d3-shape\";\nimport { aggregateData } from \"../utils\";\nimport { Data } from \"../Types\";\n\n/**\n *\n * @param props The `rolls` array containing all saved die roll data.\n * @returns The PieChart element\n */\nfunction PieChart(props: { rolls: number[] }): ReactElement {\n  const data = aggregateData(props.rolls);\n  const width = 500;\n  const height = 500;\n\n  const pie = d3\n    .pie<Data>()\n    .sort(null)\n    .value((d) => d.count);\n  const arc = d3\n    .arc<PieArcDatum<Data>>()\n    .innerRadius(0)\n    .outerRadius(Math.min(width, height) / 2 - 1);\n  const color = d3\n    .scaleOrdinal<string, string>()\n    .domain(data.map((d) => d.value.toString()))\n    .range([\n      \"#8fbcbb\",\n      \"#88c0d0\",\n      \"#81a1c1\",\n      \"#5e81ac\",\n      \"#bf616a\",\n      \"#d08770\",\n      \"#ebcb8b\",\n      \"#a3be8c\",\n      \"#b48ead\",\n    ]);\n  const radius = (Math.min(width, height) / 2) * 0.8;\n  const arcLabel = d3\n    .arc<PieArcDatum<Data>>()\n    .innerRadius(radius)\n    .outerRadius(radius);\n\n  /**\n   *\n   * @returns The SVG node containing the pie chart.\n   */\n  function chart() {\n    const arcs = pie(data);\n    const svg = d3\n      .select(\"#pie-chart\")\n      .attr(\"viewBox\", `${[-width / 2, -height / 2, width, height]}`);\n    svg\n      .append(\"g\")\n      .attr(\"stroke\", \"#eceff4\")\n      .selectAll(\"path\")\n      .data(arcs)\n      .join(\"path\")\n      .attr(\"fill\", (d) => color(d.data.value.toString()))\n      .attr(\"d\", arc)\n      .append(\"title\")\n      .text((d) => `${d.data.value.toString()}: ${d.data.count.toString()}`);\n    svg\n      .append(\"g\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", \"16\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(arcs)\n      .join(\"text\")\n      .attr(\"transform\", (d) => `translate(${arcLabel.centroid(d)})`)\n      .call((text) =>\n        text\n          .append(\"tspan\")\n          .attr(\"y\", \"-0.4em\")\n          .attr(\"font-weight\", \"bold\")\n          .attr(\"fill\", \"#2e3440\")\n          .text((d) => d.data.value.toString())\n          .call((text) =>\n            text\n              .filter((d) => d.endAngle - d.startAngle > 0.25)\n              .append(\"tspan\")\n              .attr(\"x\", 0)\n              .attr(\"y\", \"0.7em\")\n              .attr(\"fill-opacity\", 0.7)\n              .text((d) => d.data.count.toString())\n          )\n      );\n    return svg.node();\n  }\n\n  chart();\n\n  return (\n    <div>\n      <svg height={height} width={width} id=\"pie-chart\"></svg>\n    </div>\n  );\n}\n\nexport default PieChart;\n","import React, { ReactElement, useState } from \"react\";\nimport { rollDice, aggregateData } from \"./utils\";\nimport { Data } from \"./Types\";\nimport \"./App.css\";\nimport PieChart from \"./PieChart/PieChart\";\n\n/**\n *\n * @returns The main `rollgraph` element.\n */\nfunction App(): ReactElement {\n  const [faces, setFaces] = useState<number>(6);\n  const [times, setTimes] = useState<number>(1);\n  const [rolls, setRolls] = useState<number[]>([]);\n  const [shouldKeepRolls, setShouldKeepRolls] = useState<boolean>(false);\n\n  /**\n   * Updates the `rolls` array by either appending new rolls to it or resetting it.\n   */\n  function updateRolls() {\n    if (shouldKeepRolls) {\n      setRolls([...rolls, ...rollDice(faces, times)]);\n    } else {\n      setRolls(rollDice(faces, times));\n    }\n  }\n\n  /**\n   *\n   * @returns The table element displaying how many times each face value was rolled.\n   */\n  function buildTable() {\n    const data: Array<Data> = aggregateData(rolls);\n    return (\n      <div id=\"rollsTableContainer\">\n        <table>\n          <thead>\n            <tr>\n              <th>Value</th>\n              <th>Count</th>\n            </tr>\n          </thead>\n          <tbody>\n            {data.map((item) => (\n              <tr key={item.value.toString() + item.count.toString()}>\n                <td key={item.value}>{item.value}</td>\n                <td key={item.value.toString() + item.count.toString()}>\n                  {item.count}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>🎲 rollgraph 📈</h1>\n      </header>\n      <p>\n        I would like to roll a{\" \"}\n        <input\n          className=\"numberInput\"\n          type=\"number\"\n          min=\"1\"\n          value={faces}\n          onChange={(e) => setFaces(parseInt(e.target.value))}\n        />\n        -sided die{\" \"}\n        <input\n          className=\"numberInput\"\n          type=\"number\"\n          min=\"1\"\n          value={times}\n          onChange={(e) => setTimes(parseInt(e.target.value))}\n        />{\" \"}\n        {times === 1 ? \"time\" : \"times\"}.\n      </p>\n      <button id=\"rollDiceButton\" onClick={updateRolls}>\n        Roll Dice!\n      </button>\n      {rolls.length <= 2 ? <p>{rolls.join(\", \")}</p> : buildTable()}\n      <p>\n        <label>\n          {\" \"}\n          Keep Rolls\n          <input\n            type=\"checkbox\"\n            onChange={(e) => setShouldKeepRolls(e.target.checked)}\n          />\n        </label>\n      </p>\n      {rolls.length > 1 ? <PieChart rolls={rolls} /> : null}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}