{"version":3,"sources":["utils.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rollDice","faces","times","min","max","rolls","i","push","Math","floor","random","App","useState","setFaces","setTimes","setRolls","shouldKeepRolls","setShouldKeepRolls","className","type","value","onChange","e","parseInt","target","onClick","join","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAIO,SAASA,EAASC,EAAeC,GAEtC,IADA,IAL6CC,EAAaC,EAKpDC,EAAiB,GACdC,EAAI,EAAGA,EAAIJ,EAAOI,IACzBD,EAAME,MAPqCJ,EAOD,EAPcC,EAOXH,EANxCO,KAAKC,MAAMD,KAAKE,UAAYN,EAAMD,EAAM,GAAKA,KAQpD,OAAOE,E,iBCsBMM,EA3BsB,WACnC,MAA0BC,mBAAiB,GAA3C,mBAAOX,EAAP,KAAcY,EAAd,KACA,EAA0BD,mBAAiB,GAA3C,mBAAOV,EAAP,KAAcY,EAAd,KACA,EAA0BF,mBAAmB,IAA7C,mBAAOP,EAAP,KAAcU,EAAd,KACA,EAA8CH,oBAAkB,GAAhE,mBAAOI,EAAP,KAAwBC,EAAxB,KAUA,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,uEAEF,wDAA0B,uBAAOC,KAAK,SAAShB,IAAI,IAAIiB,MAAOnB,EAAOoB,SAAU,SAAAC,GAAC,OAAIT,EAASU,SAASD,EAAEE,OAAOJ,WAA/G,cAAqI,uBAAOD,KAAK,SAAShB,IAAI,IAAIiB,MAAOlB,EAAOmB,SAAU,SAAAC,GAAC,OAAIR,EAASS,SAASD,EAAEE,OAAOJ,WAA1N,IAAiP,IAAVlB,EAAc,OAAS,QAA9P,OACA,wBAAQuB,QAdZ,WAEIV,EADEC,EACO,GAAD,mBAAKX,GAAL,YAAeL,EAASC,EAAOC,KAE9BF,EAASC,EAAOC,KAUzB,wBACA,4BAAIG,EAAMqB,KAAK,QACf,uBAAOP,KAAK,WAAWE,SAAU,SAACC,GAAD,OAAOL,EAAmBK,EAAEE,OAAOG,gBCZ3DC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9d6ba82a.chunk.js","sourcesContent":["export function generateRandomIntegerInclusive(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollDice(faces: number, times: number): number[] {\n  const rolls:number[] = [];\n  for (let i = 0; i < times; i++) {\n    rolls.push(generateRandomIntegerInclusive(1, faces));\n  }\n  return rolls;\n}","import React, { ReactElement, useState } from 'react';\nimport { rollDice } from './utils';\nimport './App.css';\n\nconst App: React.FunctionComponent = (): ReactElement => {\n  const [faces, setFaces] = useState<number>(6);\n  const [times, setTimes] = useState<number>(1);\n  const [rolls, setRolls] = useState<number[]>([]);\n  const [shouldKeepRolls, setShouldKeepRolls] = useState<boolean>(false);\n\n  function updateRolls() {\n    if (shouldKeepRolls) {\n      setRolls([...rolls, ...rollDice(faces, times)]);\n    } else {\n      setRolls(rollDice(faces, times));\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ðŸŽ² rollgraph ðŸ“ˆ</h1>\n      </header>\n      <p>I would like to roll a <input type=\"number\" min=\"1\" value={faces} onChange={e => setFaces(parseInt(e.target.value))} />-sided die <input type=\"number\" min=\"1\" value={times} onChange={e => setTimes(parseInt(e.target.value))} /> {times === 1 ? \"time\" : \"times\"}.</p>\n      <button onClick={updateRolls}>Roll Dice!</button>\n      <p>{rolls.join(', ')}</p>\n      <input type=\"checkbox\" onChange={(e) => setShouldKeepRolls(e.target.checked)} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}