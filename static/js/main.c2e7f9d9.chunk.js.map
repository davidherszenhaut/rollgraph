{"version":3,"sources":["App.tsx","utils.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","faces","setFaces","times","setTimes","rolls","setRolls","className","type","min","value","onChange","e","target","onClick","max","i","push","Math","floor","random","rollDice","parseInt","join","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMAsBeA,MAlBf,WAEE,MAA0BC,mBAAiB,KAA3C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAiB,KAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA0BJ,mBAAmB,IAA7C,mBAAOK,EAAP,KAAcC,EAAd,KAEA,OACE,sBAAKC,UAAU,MAAf,UACE,iCACE,uEAEF,wDAA0B,uBAAOC,KAAK,SAASC,IAAI,IAAIC,MAAOT,EAAOU,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOH,UAAtG,cAA2H,uBAAOF,KAAK,SAASC,IAAI,IAAIC,MAAOP,EAAOQ,SAAU,SAAAC,GAAC,OAAIR,EAASQ,EAAEC,OAAOH,UAAvM,IAA6N,MAAVP,EAAgB,OAAS,QAA5O,OACA,wBAAQW,QAAS,kBAAMR,ECZtB,SAAkBL,EAAeE,GAEtC,IADA,IAL6CM,EAAaM,EAKtDV,EAAQ,GACHW,EAAI,EAAGA,EAAIb,EAAOa,IACzBX,EAAMY,MAPqCR,EAOD,EAPcM,EAOXd,EANxCiB,KAAKC,MAAMD,KAAKE,UAAYL,EAAMN,EAAM,GAAKA,KAQpD,OAAOJ,EDO6BgB,CAASC,SAASrB,GAAQqB,SAASnB,MAAnE,wBACA,4BAAIE,EAAMkB,KAAK,YEHNC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.c2e7f9d9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { rollDice } from './utils';\nimport './App.css';\n\nfunction App() {\n\n  const [faces, setFaces] = useState<string>('6');\n  const [times, setTimes] = useState<string>('1');\n  const [rolls, setRolls] = useState<number[]>([]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ðŸŽ² rollgraph ðŸ“ˆ</h1>\n      </header>\n      <p>I would like to roll a <input type=\"number\" min=\"1\" value={faces} onChange={e => setFaces(e.target.value)} />-sided die <input type=\"number\" min=\"1\" value={times} onChange={e => setTimes(e.target.value)} /> {times === \"1\" ? \"time\" : \"times\"}.</p>\n      <button onClick={() => setRolls(rollDice(parseInt(faces), parseInt(times)))}>Roll Dice!</button>\n      <p>{rolls.join(', ')}</p>\n    </div>\n  );\n}\n\nexport default App;\n","export function generateRandomIntegerInclusive(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollDice(faces: number, times: number) {\n  let rolls = [];\n  for (let i = 0; i < times; i++) {\n    rolls.push(generateRandomIntegerInclusive(1, faces));\n  }\n  return rolls;\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}