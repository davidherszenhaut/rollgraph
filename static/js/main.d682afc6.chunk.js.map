{"version":3,"sources":["utils.tsx","PieChart/PieChart.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["rollDice","faces","times","min","max","rolls","i","push","Math","floor","random","PieChart","props","data","counts","length","aggregation","Object","entries","number","count","value","parseInt","aggregateData","width","height","pie","d3","sort","d","arc","innerRadius","outerRadius","color","domain","map","toString","range","t","reverse","radius","arcLabel","arcs","svg","attr","append","selectAll","join","text","centroid","call","filter","endAngle","startAngle","node","chart","id","App","useState","setFaces","setTimes","setRolls","shouldKeepRolls","setShouldKeepRolls","className","type","onChange","e","target","onClick","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d682afc6.chunk.js","sourcesContent":["export function generateRandomIntegerInclusive(\n  min: number,\n  max: number\n): number {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollDice(faces: number, times: number): number[] {\n  const rolls: number[] = [];\n  for (let i = 0; i < times; i++) {\n    rolls.push(generateRandomIntegerInclusive(1, faces));\n  }\n  return rolls;\n}\n\ninterface Data {\n  value: number;\n  count: number;\n}\n\nexport function aggregateData(rolls: number[]): Array<Data> {\n  const counts: { [key: number]: number } = {};\n  for (let i = 0; i < rolls.length; i++) {\n    if (counts[rolls[i]]) {\n      counts[rolls[i]] = counts[rolls[i]] + 1;\n    } else {\n      counts[rolls[i]] = 1;\n    }\n  }\n  const aggregation: Data[] = [];\n  for (const [number, count] of Object.entries(counts)) {\n    aggregation.push({ value: parseInt(number), count: count });\n  }\n  return aggregation;\n}\n","import React, { ReactElement } from \"react\";\nimport * as d3 from \"d3\";\nimport { PieArcDatum } from \"d3-shape\";\nimport { aggregateData } from \"../utils\";\n\ninterface TempData {\n  value: number;\n  count: number;\n}\n\nfunction PieChart(props: { rolls: number[] }): ReactElement {\n  const data = aggregateData(props.rolls);\n  const width = 500;\n  const height = 500;\n\n  const pie = d3\n    .pie<TempData>()\n    .sort(null)\n    .value((d) => d.count);\n  const arc = d3\n    .arc<PieArcDatum<TempData>>()\n    .innerRadius(0)\n    .outerRadius(Math.min(width, height) / 2 - 1);\n  const color = d3\n    .scaleOrdinal<string, string>()\n    .domain(data.map((d) => d.value.toString()))\n    .range(\n      d3\n        .quantize((t) => d3.interpolateSpectral(t * 0.8 + 0.1), data.length)\n        .reverse()\n    );\n  const radius = (Math.min(width, height) / 2) * 0.8;\n  const arcLabel = d3\n    .arc<PieArcDatum<TempData>>()\n    .innerRadius(radius)\n    .outerRadius(radius);\n\n  function chart() {\n    const arcs = pie(data);\n    const svg = d3\n      .select(\"#pie-chart\")\n      .attr(\"viewBox\", `${[-width / 2, -height / 2, width, height]}`);\n    svg\n      .append(\"g\")\n      .attr(\"stroke\", \"white\")\n      .selectAll(\"path\")\n      .data(arcs)\n      .join(\"path\")\n      .attr(\"fill\", (d) => color(d.data.value.toString()))\n      .attr(\"d\", arc)\n      .append(\"title\")\n      .text((d) => `${d.data.value.toString()}: ${d.data.count.toString()}`);\n    svg\n      .append(\"g\")\n      .attr(\"font-family\", \"sans-serif\")\n      .attr(\"font-size\", \"12\")\n      .attr(\"text-anchor\", \"middle\")\n      .selectAll(\"text\")\n      .data(arcs)\n      .join(\"text\")\n      .attr(\"transform\", (d) => `translate(${arcLabel.centroid(d)})`)\n      .call((text) =>\n        text\n          .append(\"tspan\")\n          .attr(\"y\", \"-0.4em\")\n          .attr(\"font-weight\", \"bold\")\n          .text((d) => d.data.value.toString())\n          .call((text) =>\n            text\n              .filter((d) => d.endAngle - d.startAngle > 0.25)\n              .append(\"tspan\")\n              .attr(\"x\", 0)\n              .attr(\"y\", \"0.7em\")\n              .attr(\"fill-opacity\", 0.7)\n              .text((d) => d.data.count.toString())\n          )\n      );\n    return svg.node();\n  }\n\n  chart();\n\n  return (\n    <div>\n      <svg height={height} width={width} id=\"pie-chart\"></svg>\n    </div>\n  );\n}\n\nexport default PieChart;\n","import React, { ReactElement, useState } from \"react\";\nimport { rollDice } from \"./utils\";\nimport \"./App.css\";\nimport PieChart from \"./PieChart/PieChart\";\n\nfunction App(): ReactElement {\n  const [faces, setFaces] = useState<number>(6);\n  const [times, setTimes] = useState<number>(1);\n  const [rolls, setRolls] = useState<number[]>([]);\n  const [shouldKeepRolls, setShouldKeepRolls] = useState<boolean>(false);\n\n  function updateRolls() {\n    if (shouldKeepRolls) {\n      setRolls([...rolls, ...rollDice(faces, times)]);\n    } else {\n      setRolls(rollDice(faces, times));\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>ðŸŽ² rollgraph ðŸ“ˆ</h1>\n      </header>\n      <p>\n        I would like to roll a{\" \"}\n        <input\n          type=\"number\"\n          min=\"1\"\n          value={faces}\n          onChange={(e) => setFaces(parseInt(e.target.value))}\n        />\n        -sided die{\" \"}\n        <input\n          type=\"number\"\n          min=\"1\"\n          value={times}\n          onChange={(e) => setTimes(parseInt(e.target.value))}\n        />{\" \"}\n        {times === 1 ? \"time\" : \"times\"}.\n      </p>\n      <button onClick={updateRolls}>Roll Dice!</button>\n      <p>{rolls.join(\", \")}</p>\n      <label>\n        {\" \"}\n        Keep Rolls\n        <input\n          type=\"checkbox\"\n          onChange={(e) => setShouldKeepRolls(e.target.checked)}\n        />\n      </label>\n      <PieChart rolls={rolls} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}